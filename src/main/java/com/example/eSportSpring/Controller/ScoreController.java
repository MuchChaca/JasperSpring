/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.example.eSportSpring.Controller;

import com.example.eSportSpring.Connection.ConnectionUtils;
import com.example.eSportSpring.Entity.Player;
import com.example.eSportSpring.Repository.PlayerRepository;
import java.io.File;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.export.ExporterInput;
import net.sf.jasperreports.export.OutputStreamExporterOutput;
import net.sf.jasperreports.export.SimpleExporterInput;
import net.sf.jasperreports.export.SimpleOutputStreamExporterOutput;
import net.sf.jasperreports.export.SimplePdfExporterConfiguration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

/**
 *
 * @author user
 */
@Controller
@Service
public class ScoreController {

	@RequestMapping(value = "/add", method = RequestMethod.GET)
	public String sample() {
		return "addPlayer";
	}

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private PlayerRepository playerRepository;

	@RequestMapping(value = "/add", method = RequestMethod.POST) // Map ONLY GET Requests
	public @ResponseBody
	String addNewUser(@RequestParam String first,
			@RequestParam String last, @RequestParam String age,
			@RequestParam Boolean gender, @RequestParam String phone) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or GET request
		try {
			Player n = new Player();
			n.setFirstName(first);
			n.setLastName(last);
			n.setAge(age);
			n.setGender(gender);
			n.setPhoneNumber(phone);
			n.setScore(0);
			n.setNbParticipation(0);
			playerRepository.save(n);
		} catch (Exception e) {
			System.out.println("erreur" + e);
		}
		return "saved";
	}

	@RequestMapping(value = "/delete", method = RequestMethod.GET) // Map ONLY GET Requests
	public @ResponseBody
	String deleteUser(@RequestParam("id") Long id) {
		playerRepository.deleteById(id);
		return "deleted";
	}

	@RequestMapping(value = "/update", method = RequestMethod.GET) // Map ONLY GET Requests
	public @ResponseBody
	String updateUser(@RequestParam String first,
			@RequestParam String last, @RequestParam String age,
			@RequestParam Boolean gender, @RequestParam String phone,
			@RequestParam float score, @RequestParam int participation, @RequestParam Long id) {
		if (playerRepository.existsById(id)) {
			Player unPlayer = new Player(id);
			unPlayer.setFirstName(first);
			unPlayer.setLastName(last);
			unPlayer.setAge(age);
			unPlayer.setGender(gender);
			unPlayer.setPhoneNumber(phone);
			unPlayer.setScore(score);
			unPlayer.setNbParticipation(participation);
			playerRepository.save(unPlayer);
		}
		return "updated";
	}

	@RequestMapping(value = "/jasper", method = RequestMethod.GET)
	public @ResponseBody
	String Jasper() throws JRException, SQLException, ClassNotFoundException {

		String reportSrcFile = "src/main/resources/jasper/score.jrxml";

		// First, compile jrxml file.
		JasperReport jasperReport = JasperCompileManager.compileReport(reportSrcFile);

		Connection conn = ConnectionUtils.getConnection();

		// Parameters for report
		Map<String, Object> parameters = new HashMap<String, Object>();

		JasperPrint print = JasperFillManager.fillReport(jasperReport,
				parameters, conn);

		// Make sure the output directory exists.
		File outDir = new File("src/main/resources/jasper");
		outDir.mkdirs();

		// PDF Exportor.
		JRPdfExporter exporter = new JRPdfExporter();

		ExporterInput exporterInput = new SimpleExporterInput(print);
		// ExporterInput
		exporter.setExporterInput(exporterInput);

		// ExporterOutput
		OutputStreamExporterOutput exporterOutput = new SimpleOutputStreamExporterOutput(
				"src/main/resources/jasper/FirstJasperReport.pdf");
		// Output
		exporter.setExporterOutput(exporterOutput);

		//
		SimplePdfExporterConfiguration configuration = new SimplePdfExporterConfiguration();
		exporter.setConfiguration(configuration);
		exporter.exportReport();

		System.out.print("Done!");
		return "reported";

	}

	@RequestMapping(value = "/all", method = RequestMethod.GET)
	public @ResponseBody Iterable<Player> getAllUsers() {
		// This returns a JSON or XML with the users
		return playerRepository.findAll();
	}
	/*public String showAll(Model model) {
		model.addAttribute("players", playerRepository.findAll());
		return "allPlayer";
	}*/


	@RequestMapping("/score/{playerId}/{score}")
	@CrossOrigin
	public @ResponseBody 
	Integer setScore(@PathVariable("playerId") Long playerId, @PathVariable("score") Integer score) {
		if (playerId == null || !playerRepository.existsById(playerId)) {
			System.out.println("Player not found");
			return -1;
		}
		Optional<Player> j;
		try {
			j = playerRepository.findById(playerId);
			j.get().setScore(score);
			playerRepository.save(j.get());
		} catch (Exception e) {
			System.out.println(e.toString());
			return -1;
		}
		return 0;
	}

	@RequestMapping("/score/{playerId}")
	@CrossOrigin
	public @ResponseBody 
	Integer getScore(@PathVariable("playerId") Long playerId) {
		if (playerId == null || !playerRepository.existsById(playerId)) {
			return -1;
		}
		Optional<Player> j;
		try {
			j = playerRepository.findById(playerId);
			return (int) j.get().getScore();
		} catch (Exception e) {
			return -1;
		}
	}
}
